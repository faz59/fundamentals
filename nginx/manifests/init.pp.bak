class nginx {

  case $::osfamily  {
    'redhat':{

      $package= 'nginx' 
      $owner= 'root'
      $group= 'root'
      $docroot='/var/www'
      $confdir='/etc/nginx'
      $user= 'nginx'
    }

    'debian':{
      $package= 'nginx' 
      $owner= 'root'
      $group= 'root'
      $docroot='/var/www'
      $confdir='/etc/nginx'
      $user= 'www-data'
    }


    'windows' :{
      $package= 'nginx-service' 
      $owner= 'Administrator'
      $group= 'Administrators'
      $docroot='C:/ProgramData/nginx/html'
      $confdir='C:/ProgramData/nginx/conf.d'
      $user='nobody'
    }

    default :{
      fail ("this module is not supported on ${::osfamily}")
    }
  }

  package { $package :

    ensure => present,

  }

  File {

  owner => $owner, 
  group => $group,
  mode  => '0644',
  }

  file { $docroot:
    ensure => directory, 

  }


  file { "${docroot}/index.html":

    ensure => file, 
    source => 'puppet:///modules/nginx/index.html',

  }
  file { "${docroot}/moss.gif":

    ensure => file, 
    source => 'puppet:///modules/nginx/moss.gif',
  }

  file { "${confdir}/nginx.conf":

   ensure   => file, 
   # source => 'puppet:///modules/nginx/${::osfamily}.conf',
   content  => epp('nginx/nginx.conf.epp',
   { user   => $user,
   }), 
   notify   => Service['nginx'],
     } 

    file { "${confdir}/conf.d/default.conf":

    ensure     => file, 
    #   source => 'puppet:///modules/nginx/default-${::osfamily}.conf',
    content    => epp('nginx/default.conf.epp',
    {
      docroot => $docroot,
    }),
    
    notify     => Service['nginx'],
   }


    service  { 'nginx' :

  enable=> true,
    ensure => running, 
  
  }

}


